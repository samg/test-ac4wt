AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: Api
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /foo/bar:
            get:
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiExternalFunctionRole.Arn
                httpMethod: POST
                type: aws_proxy
                uri: !If
                  - FunctionUseExistingResource
                  - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionExistingResource.Arn}/invocations
                  - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Function
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: Function
      CodeUri: src/Function
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        ApiGETfoobar:
          Type: Api
          Properties:
            Path: /foo/bar
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          API_URL: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Api.Stage}
    Condition: FunctionCreateNewResource
  FunctionExistingResource:
    Type: Custom::StackeryExistingResource
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: function
      Data: !Ref EnvConfigmyFunctionAsString
    Condition: FunctionUseExistingResource
  ApiExternalFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-ApiExternalFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt FunctionExistingResource.Arn
      RoleName: !Sub ${AWS::StackName}-ApiExternalFunctionRole
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  EnvConfigmyFunctionAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/myFunction
Conditions:
  FunctionCreateNewResource: !Equals
    - 'false'
    - !Ref EnvConfigmyFunctionAsString
  FunctionUseExistingResource: !Not
    - Condition: FunctionCreateNewResource
Metadata:
  EnvConfigParameters:
    EnvConfigmyFunctionAsString: myFunction